@using BudgetApp.Blazor.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inherits LayoutComponentBase
@implements IDisposable

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (AuthService.IsAuthenticated)
{
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />
            <MudText Typo="Typo.h6">Budget App</MudText>
            <MudSpacer />
            <MudText Typo="Typo.body1" Class="me-4">
                Hej, @(AuthService.CurrentUser?.FirstName ?? "")!
            </MudText>
            <MudIconButton Icon="Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="@LogoutAsync" />
        </MudAppBar>
        
        <MudDrawer @bind-Open="@drawerOpen" Elevation="2" Variant="@DrawerVariant.Responsive" ClipMode="DrawerClipMode.Always">
            <NavMenuContent />
        </MudDrawer>
        
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        @Body
    </MudContainer>
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">ðŸ—™</a>
</div>

@code {
    private bool drawerOpen = true;

    protected override async Task OnInitializedAsync()
    {
        await AuthService.InitializeAsync();
        AuthService.AuthStateChanged += OnAuthStateChanged;
    }

    private void OnAuthStateChanged(User? user)
    {
        InvokeAsync(StateHasChanged);
    }

    private void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    private async Task LogoutAsync()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        AuthService.AuthStateChanged -= OnAuthStateChanged;
    }
}
